import os
import threading
import time
import requests
import subprocess
import random
import shutil
import psutil
import telebot
import json
import git
import socket
from flask import Flask, request, render_template_string
from openai import OpenAI
from binance.client import Client as BinanceClient
from pybit.unified_trading import HTTP as BybitClient
from dotenv import load_dotenv
from cryptography.fernet import Fernet
import ssl

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
METAMASK_PRIVATE_KEY = os.getenv("METAMASK_PRIVATE_KEY")
OPENSEA_API_KEY = os.getenv("OPENSEA_API_KEY")
TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI, Binance, Bybit –∏ Telegram API
client = OpenAI(api_key=OPENAI_API_KEY)
binance = BinanceClient(api_key=BINANCE_API_KEY, api_secret=BINANCE_API_SECRET)
bybit = BybitClient(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)
bot = telebot.TeleBot(TELEGRAM_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
def setup_git():
    repo_dir = '/root/angel2500'
    if not os.path.exists(repo_dir):
        os.makedirs(repo_dir)
        repo = git.Repo.init(repo_dir)
    else:
        repo = git.Repo(repo_dir)
    
    return repo

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    bot.send_message(chat_id="@YourTelegramUsername", text=message)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º
def run_program(program_name):
    subprocess.Popen([program_name])
    send_telegram_message(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {program_name} –∑–∞–ø—É—â–µ–Ω–∞.")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
def create_file(file_name, content=""):
    with open(file_name, 'w') as file:
        file.write(content)
    send_telegram_message(f"–§–∞–π–ª {file_name} —Å–æ–∑–¥–∞–Ω.")

def create_folder(folder_name):
    os.makedirs(folder_name, exist_ok=True)
    send_telegram_message(f"–ü–∞–ø–∫–∞ {folder_name} —Å–æ–∑–¥–∞–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞)
def manage_process(process_name, action="kill"):
    for proc in psutil.process_iter(['pid', 'name']):
        if process_name in proc.info['name']:
            if action == "kill":
                proc.kill()
                send_telegram_message(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –∑–∞–≤–µ—Ä—à–µ–Ω.")
            elif action == "restart":
                subprocess.Popen([process_name])
                send_telegram_message(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HTTP
def download_file(url, save_path):
    r = requests.get(url, stream=True)
    with open(save_path, 'wb') as f:
        shutil.copyfileobj(r.raw, f)
    send_telegram_message(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω —Å {url} –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {save_path}.")

# –û–±—Ö–æ–¥ —Å–µ—Ç–µ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
def bypass_network_restrictions():
    proxy = random.choice([
        "http://10.10.1.1:8888",
        "http://10.10.2.2:8080",
        "http://10.10.3.3:3128"
    ])
    proxies = {"http": proxy, "https": proxy}
    try:
        response = requests.get("http://example.com", proxies=proxies)
        send_telegram_message(f"–£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–∫—Å–∏: {proxy}. –û—Ç–≤–µ—Ç: {response.status_code}")
    except Exception as e:
        send_telegram_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
def create_github_repo(repo_name):
    url = "https://api.github.com/user/repos"
    headers = {"Authorization": "token " + os.getenv("GITHUB_TOKEN")}
    data = {"name": repo_name, "private": True}
    response = requests.post(url, headers=headers, json=data)
    
    if response.status_code == 201:
        send_telegram_message(f"GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    else:
        send_telegram_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo_name}: {response.status_code}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
def auto_train():
    while True:
        for url in AUTO_SOURCES:
            try:
                r = requests.get(url, timeout=10)
                if r.status_code == 200:
                    content = r.text[:5000]
                    prompt = f"–ü—Ä–æ—á–∏—Ç–∞–π –∏ –æ–±—ä—è—Å–Ω–∏ –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä:\n{content}"
                    save_to_context(prompt)
                    print(f"[LEARN] + –û–±—É—á–µ–Ω–∏–µ —Å: {url}")
            except Exception as e:
                print(f"[LEARN] –û—à–∏–±–∫–∞: {e}")
        time.sleep(1800)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è –∏ –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
threading.Thread(target=auto_train, daemon=True).start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
context = ssl.SSLContext(ssl.PROTOCOL_TLS)
context.load_cert_chain(certfile='/path/to/cert.pem', keyfile='/path/to/key.pem')

HTML_PAGE = '''
<html><head><title>ANGEL2500 AI CORE v4</title>
<style>
body { font-family: Arial; background: #f1f1f1; padding: 20px; }
#container { background: white; max-width: 600px; margin: auto; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
button { padding: 10px 20px; margin: 5px; }
input[type=text] { width: 100%; padding: 10px; margin-top: 10px; }
textarea { width: 100%; height: 200px; margin-top: 10px; padding: 10px; }
</style></head><body>
<div id="container">
<h2>üëÅ ANGEL2500 Web Interface</h2>
<form method="POST">
<input type="text" name="prompt" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å...">
<button type="submit">–ó–∞–ø—Ä–æ—Å</button>
</form>
{% if answer %}<h4>–û—Ç–≤–µ—Ç:</h4><textarea readonly>{{ answer }}</textarea>{% endif %}
<hr><h4>–ö–æ–º–∞–Ω–¥—ã:</h4><ul>
<li><b>status</b> ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º</li>
<li><b>markets</b> ‚Äî –∞–Ω–∞–ª–∏–∑ –±–∏—Ä–∂</li>
<li><b>token</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω</li>
<li><b>nft</b> ‚Äî –≤—ã–ø—É—Å—Ç–∏—Ç—å NFT</li>
<li><b>learn</b> ‚Äî —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</li>
<li><b>autonomy</b> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–æ—Å—Ç</li>
</ul></div></body></html>
'''

@app.route("/", methods=["GET", "POST"])
def index():
    answer = None
    if request.method == "POST":
        prompt = request.form.get("prompt")
        if prompt:
            save_to_context(prompt)
            if prompt.lower() == "status":
                b = binance.get_account()
                y = bybit.get_wallet_balance(accountType="UNIFIED")
                answer = f"Binance –±–∞–ª: {b['balances'][0]['free']}\nBybit –±–∞–ª: {y}"
            elif prompt.lower() == "markets":
                ticker = binance.get_symbol_ticker(symbol="BTCUSDT")
                answer = f"BTCUSDT: {ticker['price']}"
            elif prompt.lower() == "learn":
                threading.Thread(target=auto_train, daemon=True).start()
                answer = "üß† –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ."
            else:
                context = load_context()
                context.append({"role": "user", "content": prompt})
                try:
                    chat_completion = client.chat.completions.create(
                        model="gpt-4",
                        messages=context
                    )
                    answer = chat_completion.choices[0].message.content
                except Exception as e:
                    answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    return render_template_string(HTML_PAGE, answer=answer)

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8080, ssl_context=context)
